#콘솔에서 로그 확인
spring.jpa.show-sql=true
#출력되는 쿼리 로그를 MySQL 버전으로
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
#alter할 테이블 찾지 못하는 오류 때문에 추가
spring.jpa.hibernate.ddl-auto=update
#데이터 베이스 H2사용 (로컬)
spring.h2.console.enabled=true
#스프링부트에서 properties의 이름을 application-xxx.properties로 만들면 xxx라는 이름의 profile이 생성되어 이를 통해 관리 가능.
#여기서는 application-oauth.properties를 포함하도록 함
spring.profiles.include=oauth
#세션 저장소를 jdbc로 설정
spring.session.store-type=jdbc
## 실행된 쿼리 로그로 확인
#spring.jpa.properties.hibernate.show_sql=true
## SQL문을 보기 좋게 출력
#spring.jpa.properties.hibernate.format_sql=true
## 디버깅이 용이하도록 SQL문 이외의 추가적인 정보 출력
#spring.jpa.properties.hibernate.use_sql_comments=true
## 출력되는 쿼리를 MYSQL 버전으로 변경
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
## 바인드 파라미터(SQL문 중 물음표로 표기된 부분) 출력
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
## 로컬 환경에서 H2 DB 사용
#spring.h2.console.enabled=true
## jpaAuditingHandler 등록하기 위해 @EnableJpaAuditing 선언
#spring.main.allow-bean-definition-overriding=true
## profile=프로퍼티명 이렇게 호출하면 해당 properties의 설정들을 가져올 수 있음
#spring.profiles.include=oauth
## 세션 저장소를 jdbc로 선택
#spring.session.store-type=jdbc